{{- /* Auto-manage transmission based on VPN status */ -}}
# Transmission VPN Integration
# Ensures transmission only runs when VPN is connected

function __check_vpn_and_transmission --description "Check VPN status and manage transmission"
    # Check if VPN is connected
    if ip addr show tun0 2>/dev/null | grep -q 'inet '
        # VPN is connected
        if systemctl --user is-active --quiet transmission-daemon
            # Transmission is running, check if bind address needs updating
            set -l current_vpn_ip (ip addr show tun0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
            set -l bound_ip (grep '"bind-address-ipv4"' ~/.config/transmission-daemon/settings.json | cut -d'"' -f4)

            if test "$current_vpn_ip" != "$bound_ip"
                echo "üîÑ VPN IP changed, updating transmission binding..."
                transmission-vpn-bind
            end
        else
            # Transmission not running but VPN is up
            # User can manually start it with 'tstart' if desired
            # We don't auto-start to avoid unexpected bandwidth usage
        end
    else
        # VPN is not connected
        if systemctl --user is-active --quiet transmission-daemon
            echo "‚ö†Ô∏è  VPN disconnected, stopping transmission (killswitch)..."
            systemctl --user stop transmission-daemon
        end
    end
end

# Check on shell startup
__check_vpn_and_transmission

# Optional: Monitor VPN changes with a background job
# This would require a more complex implementation with file watching
# For now, rely on manual 'tstart' which includes VPN checking