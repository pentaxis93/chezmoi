{{- $kb := .keybindings -}}
source /usr/share/cachyos-fish-config/cachyos-config.fish

# overwrite greeting
# potentially disabling fastfetch
#function fish_greeting
#    # smth smth
#end

export PATH="$HOME/.local/bin:$PATH"

# Set default editor
set -gx EDITOR helix
set -gx VISUAL helix

# Ultra-Zen Semantic Keybindings - Vi mode with Helix-native philosophy
# "Do not define keybindings; define intentions."
fish_vi_key_bindings

# Vi mode cursor configuration - Visual feedback for mode state
# Uses Kanagawa semantic colors for mode indication
set fish_vi_force_cursor 1
set fish_cursor_default block        # Normal mode: solid block
set fish_cursor_insert line          # Insert mode: thin line
set fish_cursor_visual underscore    # Visual mode: underscore
set fish_cursor_replace_one underscore # Replace: underscore

# Vi mode prompt indicator - Semantic color feedback
# Following the Master's wisdom: "Let the mode manifest as color"
function fish_mode_prompt
    switch $fish_bind_mode
        case default
            # Normal mode: Focus green (semantic: ready for action)
            set_color --bold {{ template "color-hex.tmpl" .kanagawa.dragon.green }}
            echo '[N]'
        case insert
            # Insert mode: Info blue (semantic: accepting input)
            set_color --bold {{ template "color-hex.tmpl" .kanagawa.dragon.blue }}
            echo '[I]'
        case visual
            # Visual mode: Warning yellow (semantic: selection active)
            set_color --bold {{ template "color-hex.tmpl" .kanagawa.dragon.yellow }}
            echo '[V]'
        case replace_one
            # Replace mode: Error red (semantic: destructive change)
            set_color --bold {{ template "color-hex.tmpl" .kanagawa.dragon.red }}
            echo '[R]'
    end
    set_color normal
    echo -n ' '
end

# Ultra-Zen Keybinding Philosophy: Native Sovereignty
# "The mountain does not teach the river how to flow"
# We import Helix navigation wisdom while honoring Fish's native completion sovereignty
function fish_user_key_bindings
    # === HELIX NAVIGATION IMPORTS ===
    # Line navigation - Helix semantic clarity
    {{ template "keybind-fish.tmpl" dict "action" "line_start" "mode" "default" "keybindings" $kb }}  # Go to line start (helix: gh)
    {{ template "keybind-fish.tmpl" dict "action" "line_end" "mode" "default" "keybindings" $kb }}  # Go to line end (helix: gl)

    # NOTE: Buffer navigation (gg/ge) removed - not useful in shell context
    # These belong in editors where navigating entire documents makes sense

    # Discovery - Search through history with vi semantics
    {{ template "keybind-fish.tmpl" dict "action" "search_backward" "mode" "default" "keybindings" $kb }}  # Search history with /
    {{ template "keybind-fish.tmpl" dict "action" "search_forward" "mode" "default" "keybindings" $kb }}  # Reverse search with ?

    # Selection modes - Helix philosophy for consistency
    {{ template "keybind-fish.tmpl" dict "action" "extend_selection" "mode" "default" "keybindings" $kb }}  # Extend selection (helix: x)
    {{ template "keybind-fish.tmpl" dict "action" "kill_selection" "mode" "visual" "keybindings" $kb }}  # Cut selection in visual mode

    # === FISH NATIVE COMPLETIONS ===
    # We honor Fish's sovereignty over autosuggestions - this is Fish's domain

    # Primary completion - Tab is universal
    bind -M default \t forward-char        # Tab accepts suggestion (native Fish)
    bind -M insert \t forward-char         # Tab in insert mode too

    # Traditional Fish completion keys - respect existing muscle memory
    bind -M default \cf forward-char       # Ctrl+F accepts full suggestion (Fish tradition)
    bind -M insert \cf forward-char        # Ctrl+F in insert mode

    # NOTE: Alt+arrows removed - we use Helix hjkl for ALL navigation
    # Why reach for Alt+Right when 'w' moves forward a word?
    # Why Alt+Left when 'b' moves back? Helix navigation is superior!

    # Line acceptance - universal semantics
    {{ template "keybind-fish.tmpl" dict "action" "execute" "mode" "default" "keybindings" $kb }}  # Enter executes in normal mode
    {{ template "keybind-fish.tmpl" dict "action" "execute" "mode" "insert" "keybindings" $kb }}  # Enter executes in insert mode

    # File browser integration - Quick navigation with lf
    # Ultra-Zen: "From command line to file explorer, one key bridges the realms"
    bind -M default \co 'lfcd; commandline -f repaint'  # Ctrl+O opens lf, changes directory on exit
    bind -M insert \co 'lfcd; commandline -f repaint'   # Available in insert mode too
end

# Editor alias - 'h' for helix (ultrathink keybinding consistency)
alias h="helix"

# Dark Mode Configuration - System-wide dark theme preferences
# Ensures consistent dark theme across GTK and Qt applications
export GTK_THEME="adw-gtk3-dark"
export QT_STYLE_OVERRIDE="adwaita-dark"

# nmtui Configuration - Dynamic Kanagawa color theme from centralized palette
# Following project guidelines: unified color theme from colors.yaml
# Uses dynamic template that maps semantic color names to terminal indices
export NEWT_COLORS='{{ template "newt-colors-dynamic.tmpl" . }}'

# nmtui wrapper function - Enhanced NetworkManager TUI with zen aesthetics
# Provides consistent keybinding reference and usage guidance
function nmtui
    # Display quick reference for nmtui navigation (no vim bindings available)
    echo "╭─────────────────────────────────────────────╮"
    echo "│ NetworkManager TUI - Zen Configuration     │"
    echo "├─────────────────────────────────────────────┤"
    echo "│ Navigation:                                 │"
    echo "│  ↑↓←→  Navigate           Tab    Next      │"
    echo "│  Space  Toggle            Enter  Select    │"
    echo "│  Esc    Back/Cancel                        │"
    echo "├─────────────────────────────────────────────┤"
    echo "│ Commands:                                   │"
    echo "│  nmtui-edit     Connection editor           │"
    echo "│  nmtui-connect  Activate connections        │"
    echo "│  nmtui-hostname Set system hostname         │"
    echo "╰─────────────────────────────────────────────╯"
    echo ""

    # Launch nmtui with arguments if provided
    command nmtui $argv
end

# Ultra-Zen Bitwarden Integration
# "Secrets flow through semantic intentions"

# Bitwarden abbreviations - Following semantic philosophy
# These expand at the prompt for transparency and learning
abbr -a bwu "bw-unlock"            # Unlock vault (semantic: prepare)
abbr -a bwl "bw-lock"              # Lock vault (semantic: secure)
abbr -a bwc "bw-copy"              # Copy password (semantic: retrieve)
abbr -a bwg "bw-generate"          # Generate password (semantic: create)
abbr -a bws "bw sync"              # Sync vault (semantic: synchronize)
abbr -a bwlist "bw list items"     # List items (semantic: discover)
abbr -a bwh "bw-help"              # Show help (semantic: learn)

# VPN abbreviations - Secure tunneling through the vault
# "The path to the network flows through the vault"
abbr -a vpc "vpn-connect"          # Connect VPN (semantic: establish)
abbr -a vpd "vpn-disconnect"       # Disconnect VPN (semantic: terminate)
abbr -a vps "vpn-status"           # Check status (semantic: observe)

# IRC Semantic Abbreviations
abbr -a i "irc"                     # Launch IRC (semantic: communicate)
abbr -a is "irc-status"            # IRC status (semantic: observe)
abbr -a id "irc-downloads"         # Manage downloads (semantic: organize)
abbr -a idl "irc-downloads list"   # List downloads (semantic: discover)
abbr -a idc "irc-downloads clean"  # Clean old files (semantic: maintain)

# Auto-lock Bitwarden on terminal exit - Security first
# "The wise seal their treasures when departing"
function __bw_auto_lock_on_exit --on-event fish_exit
    if test -n "$BW_SESSION"
        bw lock 2>/dev/null
        set -e BW_SESSION
    end
end
