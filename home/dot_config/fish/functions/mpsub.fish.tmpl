function mpsub --description "Manage subtitles for videos (mpsub = media-play-subtitles)"
    set -l cmd $argv[1]
    set -l args $argv[2..-1]

    switch "$cmd"
        case find search
            # Find subtitle files in current directory tree
            echo "Searching for subtitle files..."
            find . -type f \( \
                -iname "*.srt" -o \
                -iname "*.ass" -o \
                -iname "*.ssa" -o \
                -iname "*.sub" -o \
                -iname "*.vtt" -o \
                -iname "*.idx" \
                \) 2>/dev/null | sort

        case org organize
            # Organize subtitles into proper directories
            echo "Organizing subtitle files..."
            set -l sub_count 0

            # Find all video files
            for video in *.{mp4,mkv,avi,webm,mov,wmv,flv,mpg,mpeg} 2>/dev/null
                if test -f "$video"
                    set -l basename (basename "$video" | sed 's/\.[^.]*$//')

                    # Find matching subtitle files
                    for sub in "$basename"*.{srt,ass,ssa,sub,vtt} 2>/dev/null
                        if test -f "$sub"
                            # Create subs directory if needed
                            test -d subs || mkdir -p subs

                            # Move subtitle to subs directory
                            mv -v "$sub" "subs/"
                            set sub_count (math $sub_count + 1)
                        end
                    end
                end
            end

            if test $sub_count -gt 0
                echo "Organized $sub_count subtitle file(s) into subs/"
            else
                echo "No subtitle files to organize"
            end

        case rename
            # Rename subtitles to match video files
            echo "Renaming subtitle files to match videos..."
            set -l rename_count 0

            for video in *.{mp4,mkv,avi,webm,mov,wmv,flv,mpg,mpeg} 2>/dev/null
                if test -f "$video"
                    set -l video_base (basename "$video" | sed 's/\.[^.]*$//')

                    # Look for subtitle files with different names
                    for sub in *.{srt,ass,ssa,sub,vtt} subs/*.{srt,ass,ssa,sub,vtt} 2>/dev/null
                        if test -f "$sub"
                            set -l sub_base (basename "$sub" | sed 's/\.[^.]*$//')
                            set -l sub_ext (echo "$sub" | sed 's/.*\.//')

                            # Check if subtitle might belong to this video (fuzzy match)
                            if string match -q -i "*$video_base*" "$sub_base"
                                or string match -q -i "*"(string sub -l 10 "$video_base")"*" "$sub_base"

                                # Rename if not already matching
                                if test "$sub_base" != "$video_base"
                                    set -l dir (dirname "$sub")
                                    set -l new_name "$dir/$video_base.$sub_ext"

                                    if not test -f "$new_name"
                                        mv -v "$sub" "$new_name"
                                        set rename_count (math $rename_count + 1)
                                    end
                                end
                            end
                        end
                    end
                end
            end

            if test $rename_count -gt 0
                echo "Renamed $rename_count subtitle file(s)"
            else
                echo "No subtitle files needed renaming"
            end

        case check
            # Check which videos have subtitles
            echo "Checking subtitle coverage..."
            set -l with_subs 0
            set -l without_subs 0

            for video in *.{mp4,mkv,avi,webm,mov,wmv,flv,mpg,mpeg} 2>/dev/null
                if test -f "$video"
                    set -l basename (basename "$video" | sed 's/\.[^.]*$//')
                    set -l has_sub 0

                    # Check for matching subtitles
                    for sub in "$basename"*.{srt,ass,ssa,sub,vtt} "subs/$basename"*.{srt,ass,ssa,sub,vtt} 2>/dev/null
                        if test -f "$sub"
                            set has_sub 1
                            break
                        end
                    end

                    if test $has_sub -eq 1
                        echo "✓ $video"
                        set with_subs (math $with_subs + 1)
                    else
                        echo "✗ $video"
                        set without_subs (math $without_subs + 1)
                    end
                end
            end

            echo ""
            echo "Summary: $with_subs with subtitles, $without_subs without"

        case help '*'
            echo "MPV Subtitle Management Tool"
            echo ""
            echo "Usage: mpsub <command>"
            echo ""
            echo "Commands:"
            echo "  find/search  - Find all subtitle files in directory tree"
            echo "  organize/org - Move subtitles to subs/ directory"
            echo "  rename       - Rename subtitles to match video filenames"
            echo "  check        - Check which videos have subtitles"
            echo "  help         - Show this help message"
            echo ""
            echo "MPV will automatically find subtitles in:"
            echo "  - Same directory as video"
            echo "  - subs/ subdirectory"
            echo "  - Parent directory"
            echo ""
            echo "Subtitle keybindings in MPV:"
            echo "  v     - Toggle subtitle visibility"
            echo "  s/S   - Cycle through subtitles"
            echo "  z/x   - Adjust subtitle timing"
            echo "  Alt+j/k - Move subtitles up/down"
    end
end

# Register semantic abbreviation
abbr --add mpsub mpsub