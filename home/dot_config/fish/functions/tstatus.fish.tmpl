{{- /* Show transmission and VPN status */ -}}
function tstatus --description "Show transmission daemon and VPN status"
    # Check daemon status
    if systemctl --user is-active --quiet transmission-daemon
        set_color green
        echo "✓ Transmission daemon: Running"
        set_color normal

        # Get bind address from config
        set bind_ip (grep '"bind-address-ipv4"' ~/.config/transmission-daemon/settings.json | cut -d'"' -f4)
        echo "  Bound to: $bind_ip"

        # Check if bound IP matches VPN
        set vpn_ip (ip addr show tun0 2>/dev/null | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
        if test -n "$vpn_ip"
            if test "$bind_ip" = "$vpn_ip"
                set_color green
                echo "  VPN: Connected ($vpn_ip)"
                set_color normal
            else
                set_color yellow
                echo "  ⚠ VPN IP mismatch (current: $vpn_ip, bound: $bind_ip)"
                echo "  Run 'transmission-vpn-bind' to update"
                set_color normal
            end
        else
            set_color red
            echo "  ⚠ VPN: Not connected (killswitch active)"
            set_color normal
        end

        # Show active torrents count
        set active_count (transmission-remote {{ .transmission.rpc_host }}:{{ .transmission.rpc_port }} -n (transmission-auth) -l 2>/dev/null | grep -v "^ID" | grep -v "^Sum:" | command wc -l)
        echo "  Active torrents: $active_count"
    else
        set_color red
        echo "✗ Transmission daemon: Not running"
        set_color normal

        # Check VPN status
        if ip addr show tun0 2>/dev/null | grep -q 'inet '
            set_color green
            echo "  VPN: Connected"
            set_color normal
            echo "  Run 'tstart' to start transmission"
        else
            set_color yellow
            echo "  VPN: Not connected"
            set_color normal
            echo "  Run 'vpc' to connect VPN, then 'tstart'"
        end
    end
end